<?xml version="1.0"?>
<project name="example" default="build" basedir=".">

    <property name="src.dir" location="src/main" />
    <property name="test.dir" location="src/test" />

    <property name="build.dir" location="build" />
    <property name="dist.dir" location="${build.dir}/dist" />
    <property name="report.dir" location="${build.dir}/report" />
    <property name="compile.dir" location="${build.dir}/compile" />

    <property name="cobertura.dir" location="${build.dir}/cobertura" />
    <property name="cobertura.report.dir" location="${cobertura.dir}/report" />
    <property name="cobertura.classes.dir" location="${cobertura.dir}/classes" />
    <property name="cobertura.datafile" location="${cobertura.dir}/cobertura.ser" />

    <macrodef name="compile">
        <attribute name="srcdir" />
        <attribute name="jarfile" />
        <attribute name="classpath" />
        <sequential>
            <mkdir dir="${compile.dir}/classes" />
            <javac srcdir="@{srcdir}" destdir="${compile.dir}/classes" classpathref="@{classpath}"
                   includeantruntime="no" source="1.6" target="1.6" debug="yes" />
            <copy todir="${compile.dir}/classes" includeemptydirs="no">
                <fileset dir="@{srcdir}" excludes="**/*.java" />
            </copy>
            <jar jarfile="${compile.dir}/@{jarfile}" basedir="${compile.dir}/classes" />
            <delete dir="${compile.dir}/classes" />
        </sequential>
    </macrodef>

    <macrodef name="unit-test">
        <attribute name="testdir" />
        <sequential>
            <mkdir dir="${report.dir}" />
            <junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="no" failureproperty="unit.tests.failed">
                <classpath refid="test.classpath" />
                <formatter type="xml" />
                <batchtest if="testcase" todir="${report.dir}">
                    <fileset dir="@{testdir}">
                        <include name="**/${testcase}.java" />
                    </fileset>
                </batchtest>
                <batchtest unless="testcase" todir="${report.dir}">
                    <fileset dir="@{testdir}">
                        <include name="**/*Tests.java" />
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <include file="bootstrap/shavenmaven.xml" />
    <available file="lib/shavenmaven.jar" property="shavenmaven.exists" />

    <target name="build" depends="clean,make-jars,run-tests,make-war" description="Main target to create WAR file." />

    <target name="clean">
        <delete dir="${build.dir}" />
    </target>

    <target name="fetch-libs" description="Fetch third-party libraries." depends="install-shavenmaven">
        <update dependencies="bootstrap/cobertura.txt" directory="lib/cobertura/jar" />
        <update dependencies="bootstrap/provided.txt" directory="lib/provided/jar" />
        <update dependencies="bootstrap/compile.txt" directory="lib/compile/jar" />
        <update dependencies="bootstrap/test.txt" directory="lib/test/jar" />
        <path id="compile.classpath">
            <fileset dir="lib/provided/jar" />
            <fileset dir="lib/compile/jar" />
        </path>
        <path id="test.classpath">
            <fileset dir="${compile.dir}" />
            <fileset dir="lib/test/jar" />
            <path refid="compile.classpath" />
        </path>
        <path id="cobertura.classpath">
            <fileset dir="lib/cobertura/jar" includes="*.jar" />
        </path>
    </target>

    <target name="install-shavenmaven" unless="shavenmaven.exists">
        <install version="43" />
    </target>

    <target name="make-jars" depends="fetch-libs">
        <compile srcdir="${src.dir}" jarfile="${ant.project.name}.jar" classpath="compile.classpath" />
        <compile srcdir="${test.dir}" jarfile="${ant.project.name}-test.jar" classpath="test.classpath" />
    </target>

    <target name="run-tests" depends="unit-tests" if="unit.tests.failed"
            description="Run all tests. Use -Dtestcase=SomeTestClassName to specify a single test.">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml" />
            <report todir="${report.dir}/html" />
        </junitreport>
        <fail message="One or more tests failed. Please check the logs for more info." />
    </target>

    <target name="unit-tests" depends="make-jars">
        <unit-test testdir="${test.dir}" />
    </target>

    <target name="make-war" depends="make-jars">
        <mkdir dir="${dist.dir}" />
        <war warfile="${dist.dir}/${ant.project.name}.war" webxml="src/webapp/WEB-INF/web.xml">
            <fileset dir="src/webapp" excludes="**/web.xml" />
            <classes dir="${src.dir}" includes="*.properties" />
            <lib dir="${compile.dir}" excludes="*test.jar" />
            <lib dir="lib/compile/jar" />
        </war>
    </target>

    <target name="run-jetty" depends="clean,make-jars" description="Run application in Jetty.">
        <java classname="example.jetty.WebServer" classpathref="classpath" fork="true" failonerror="true" />
    </target>

    <target name="package-src" depends="clean" description="Create zip of the source code for distribution">
        <mkdir dir="${build.dir}" />
        <zip basedir="${basedir}" destfile="${build.dir}/${ant.project.name}.zip">
            <exclude name="**/.DS_Store" />
            <exclude name="build/" />
            <exclude name="*.iws" />
            <exclude name=".git/" />
            <exclude name="out/" />
            <exclude name="lib/" />
        </zip>
    </target>

    <target name="coverage-report" depends="make-jars" description="Create cobertura code coverage report.">
        <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

        <mkdir dir="${cobertura.classes.dir}" />
        <cobertura-instrument todir="${cobertura.classes.dir}" datafile="${cobertura.datafile}">
            <fileset dir="${compile.dir}" excludes="*test.jar" />
        </cobertura-instrument>

        <junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="no">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
            <classpath>
                <fileset dir="${cobertura.classes.dir}" />
                <fileset dir="${compile.dir}" includes="*.jar" />
                <path refid="test.classpath" />
                <path refid="cobertura.classpath" />
            </classpath>
            <batchtest>
                <fileset dir="${test.dir}">
                    <include name="**/*Tests.java" />
                </fileset>
            </batchtest>
        </junit>

        <mkdir dir="${cobertura.report.dir}" />
        <cobertura-report format="html" datafile="${cobertura.datafile}"
                          destdir="${cobertura.report.dir}" srcdir="${src.dir}" />
    </target>

</project>
